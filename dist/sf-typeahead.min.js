angular.module("sfTypeaheadTemplates",[]).run(["$templateCache",function(e){e.put("src/templates/sf-typeahead.html",'<div class="form-group"\n     ng-controller="TypeaheadController"\n     ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false }"\n     schema-validate="form" sf-field-model >\n  <!--<pre>{{form|json}}</pre>-->\n  <label class="control-label" ng-show="showTitle()">{{form.title}}</label>\n  <input type="text"\n         ng-readonly="form.readonly"\n         sf-field-model="replaceAll"\n         ng-model="$$value$$"\n         ng-model-options="{ allowInvalid: true }"\n         typeahead-editable="false"\n         uib-typeahead="value for value in form.values | filter:$viewValue | limitTo:8"\n         class="form-control">\n  <span class="help-block" sf-message="form.description"></span>\n</div>\n')}]),angular.module("sfTypeahead",["schemaForm","sfTypeaheadTemplates"]).config(["schemaFormProvider","schemaFormDecoratorsProvider","sfBuilderProvider","sfPathProvider",function(e,a,l,o){var r=function(a,l,r){if("string"===l.type&&"typeahead"==l.format){var t=e.stdFormObj(a,l,r);return t.key=r.path,t.type="typeahead",r.global.validators&&(t.$validators=r.global.validators),r.lookup[o.stringify(r.path)]=t,t}};e.defaults.string.unshift(r),a.defineAddOn("bootstrapDecorator","typeahead","src/templates/sf-typeahead.html",l.stdBuilders)}]).controller("TypeaheadController",["$scope",function(e){e.$watch("ngModel.$modelValue",function(){e.ngModel.$validate?(e.ngModel.$validate(),e.ngModel.$invalid&&(e.ngModel.$dirty=!0,e.ngModel.$pristine=!1)):e.ngModel.$setViewValue(ngModel.$viewValue)},!0),e.$watch("form",function(){e.form.disableErrorState=e.form.hasOwnProperty("readonly")&&e.form.readonly})}]);